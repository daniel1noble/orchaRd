% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loo_plot.R
\name{loo_plot}
\alias{loo_plot}
\title{Leave-One-Out plot}
\usage{
loo_plot(
  model,
  loo_dataframe,
  order = c("none", "alphabetic", "ascending", "descending"),
  labels = NULL
)
}
\arguments{
\item{model}{A metafor model from class \code{rma}, \code{rma.mv}, or \code{rma.uni}.}

\item{loo_dataframe}{A data frame containing leave-one-out results. It must include the columns:
\code{left_out} (paper identifier), \code{b} (effect size), \code{ci_lb}, and \code{ci_ub}.}

\item{order}{A character string specifying the order for the \code{left_out} factor.
Options are \code{"none"}, \code{"alphabetic"}, \code{"ascending"}, or \code{"descending"}.
\code{"ascending"} and \code{"descending"} order the factor by the value of \code{b}.}

\item{labels}{Optional. A data frame mapping the raw codes in \code{left_out} to friendlier names.
It must have two columns:
\itemize{
  \item \code{left_out}: the codes as they appear in \code{loo_dataframe}.
  \item \code{label}: the friendly label you want to display.
}}
}
\value{
A ggplot2 object.
}
\description{
Create a leave-one-out sensitivity plot for a meta-analytic model.
}
\examples{
\dontrun{
  # Load necessary libraries
  library(metafor)
  library(dplyr)

  # Calculate effect sizes using the metafor package
  dat <- metafor::escalc(measure = "RR", ai = tpos, bi = tneg, ci = cpos, di = cneg, data = dat.bcg)

  # Fit the meta-analytic model
  res <- metafor::rma(yi, vi, data = dat)

  # Create a mapping of trial codes to friendly labels.
  # This step could also be done in a spreadsheet and read in as a CSV.
  labels_df <- dat.bcg \%>\%
    dplyr::distinct(trial, .keep_all = TRUE) \%>\%
    dplyr::mutate(left_out = trial,
                  label = paste(author, year, sep = ", ")) \%>\%
    dplyr::select(left_out, label)

  # Run the leave-one-out analysis (assuming a leave_one_out function exists)
  res_loo <- leave_one_out(res, group = "trial")

  # Create the leave-one-out plot using custom labels and descending order.
  loo_plot(res, res_loo, order = "descending", labels = labels_df)
}
}
